// Esercizio 1: Lambda per filtrare numeri pari
List<Integer> numeri = Arrays.asList(1,2,3,4,5,6);
List<Integer> pari = numeri.stream()
                           .filter(n -> n % 2 == 0)
                           .collect(Collectors.toList());

// Esercizio 2: Contatore thread-safe con tryLock
class SafeCounter {
    private int count = 0;
    private Lock lock = new ReentrantLock();
    
    public boolean safeIncrement() {
        if(lock.tryLock()) {
            try { count++; return true; } 
            finally { lock.unlock(); }
        }
        return false;
    }
}

// Esercizio 3: CyclicBarrier per somma valori
int[] results = new int[3];
CyclicBarrier barrier = new CyclicBarrier(3, () -> {
    int total = results[0] + results[1] + results[2];
    System.out.println("Somma totale: " + total);
});

// Esercizio 4: Fattoriale con Callable
ExecutorService pool = Executors.newFixedThreadPool(2);
Callable<Long> factorialTask = n -> {
    long result = 1;
    for(int i = 1; i <= n; i++) result *= i;
    return result;
};
Future<Long> future = pool.submit(() -> factorialTask.call(5));
